[{"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\about\\page.tsx":"1","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\basket\\page.tsx":"2","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\filter-page\\page.tsx":"3","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\filter-page\\[type]\\page.tsx":"4","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\page.tsx":"5","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\BasketComponents\\Basket.tsx":"6","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\BasketComponents\\BasketRow.tsx":"7","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Brands\\BrandsGallery.tsx":"8","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\breadcrumbs\\Breadcrumbs.stories.tsx":"9","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\breadcrumbs\\Breadcrumbs.tsx":"10","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\card\\Card.tsx":"11","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\card\\FilterCards.tsx":"12","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\CatalogueItem\\CatalogueItem.tsx":"13","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Categories\\CategoriesRow.tsx":"14","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Categories\\CategoryGallery.tsx":"15","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ContactForms\\ContactForms.tsx":"16","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\FeaturesComponent\\Features.tsx":"17","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\FeaturesComponent\\FeaturesCard.tsx":"18","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\Filter.tsx":"19","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterBattery.tsx":"20","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterHdd.tsx":"21","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterKeyboard.tsx":"22","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterMatrix.tsx":"23","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterPowerSupply.tsx":"24","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterRam.tsx":"25","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\TopFilter\\TopFilter.tsx":"26","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Footer\\Footer.tsx":"27","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\BurgerMenu.tsx":"28","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\Header.tsx":"29","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderBasket.tsx":"30","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderCallBack.tsx":"31","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderFavs.tsx":"32","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderSearch.tsx":"33","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\HeaderMiniCatalogItem.tsx":"34","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\HeaderMiniCatalogPropertyItem.tsx":"35","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\MiniCatalog.tsx":"36","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\HistoryProducts\\HistoryProducts.tsx":"37","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Loading\\Loading.tsx":"38","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\MainStatics\\FeaturesStatic.tsx":"39","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\MainStatics\\MainHero.tsx":"40","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Order\\Order.tsx":"41","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Order\\TownInput.tsx":"42","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\Product.tsx":"43","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductHistoryAdd.tsx":"44","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductInteractiveElems.tsx":"45","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductPair\\ProductPair.tsx":"46","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductPair\\ProductPairClientButton.tsx":"47","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductsTechs.tsx":"48","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductSwiper.tsx":"49","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\SimilarProducts\\SimilarProducts.tsx":"50","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\SimilarProducts\\SimilarProductsCard.tsx":"51","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Spinner\\Spinner.stories.tsx":"52","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Spinner\\Spinner.tsx":"53","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\types\\types.ts":"54","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\buttons\\primary\\Primary.stories.tsx":"55","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\buttons\\primary\\PrimaryBtn.tsx":"56","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\BasicRadio.stories.tsx":"57","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\BasicRadio.tsx":"58","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\Radio.tsx":"59","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\select\\Select.stories.tsx":"60","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\select\\Select.tsx":"61","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\Icons\\IconRenderer.tsx":"62","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\PrimaryInput.stories.tsx":"63","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\PrimaryInput.tsx":"64","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\TextAreaInput.stories.tsx":"65","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\TextAreaInput.tsx":"66","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\DiscountSticker.stories.tsx":"67","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\DiscountSticker.tsx":"68","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductAvailability.stories.tsx":"69","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductAvailability.tsx":"70","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductTag.stories.tsx":"71","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductTag.tsx":"72","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\contacts\\page.tsx":"73","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\delivery\\page.tsx":"74","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\favourite\\page.tsx":"75","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\layout.tsx":"76","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\lib\\data.ts":"77","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\lib\\service.ts":"78","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\not-found.tsx":"79","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\order\\page.tsx":"80","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\page.tsx":"81","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\product\\[...category_id]\\page.tsx":"82","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\provider.tsx":"83","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\basket\\basketSlice.ts":"84","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\favs\\favsSlice.ts":"85","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\historyProducts\\historyProducts.ts":"86","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\query\\query.ts":"87","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\search\\searchSlice.ts":"88","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\store.ts":"89","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\warranty\\page.tsx":"90"},{"size":7600,"mtime":1705663476757,"results":"91","hashOfConfig":"92"},{"size":814,"mtime":1705245418487,"results":"93","hashOfConfig":"92"},{"size":90,"mtime":1703081786873,"results":"94","hashOfConfig":"92"},{"size":2006,"mtime":1705412272515,"results":"95","hashOfConfig":"92"},{"size":2333,"mtime":1705692040191,"results":"96","hashOfConfig":"92"},{"size":7261,"mtime":1705919785013,"results":"97","hashOfConfig":"92"},{"size":7855,"mtime":1705605643822,"results":"98","hashOfConfig":"92"},{"size":3785,"mtime":1705668363764,"results":"99","hashOfConfig":"92"},{"size":664,"mtime":1701425282818,"results":"100","hashOfConfig":"92"},{"size":1364,"mtime":1705675113821,"results":"101","hashOfConfig":"92"},{"size":5053,"mtime":1705675113821,"results":"102","hashOfConfig":"92"},{"size":39169,"mtime":1705663476762,"results":"103","hashOfConfig":"92"},{"size":2846,"mtime":1705692040191,"results":"104","hashOfConfig":"92"},{"size":2830,"mtime":1705489850330,"results":"105","hashOfConfig":"92"},{"size":3785,"mtime":1705490681592,"results":"106","hashOfConfig":"92"},{"size":2470,"mtime":1705692040192,"results":"107","hashOfConfig":"92"},{"size":4015,"mtime":1705919759697,"results":"108","hashOfConfig":"92"},{"size":3309,"mtime":1705920753021,"results":"109","hashOfConfig":"92"},{"size":1337,"mtime":1705675113822,"results":"110","hashOfConfig":"92"},{"size":18421,"mtime":1705663476763,"results":"111","hashOfConfig":"92"},{"size":15522,"mtime":1705663476764,"results":"112","hashOfConfig":"92"},{"size":18880,"mtime":1705663476764,"results":"113","hashOfConfig":"92"},{"size":26182,"mtime":1705412272522,"results":"114","hashOfConfig":"92"},{"size":18569,"mtime":1705663476765,"results":"115","hashOfConfig":"92"},{"size":25189,"mtime":1705663476766,"results":"116","hashOfConfig":"92"},{"size":11823,"mtime":1705663476767,"results":"117","hashOfConfig":"92"},{"size":6274,"mtime":1705662220665,"results":"118","hashOfConfig":"92"},{"size":2962,"mtime":1704800357403,"results":"119","hashOfConfig":"92"},{"size":3667,"mtime":1705425281562,"results":"120","hashOfConfig":"92"},{"size":4330,"mtime":1705597555645,"results":"121","hashOfConfig":"92"},{"size":4715,"mtime":1705596186744,"results":"122","hashOfConfig":"92"},{"size":852,"mtime":1705426236193,"results":"123","hashOfConfig":"92"},{"size":10152,"mtime":1705921070029,"results":"124","hashOfConfig":"92"},{"size":3297,"mtime":1705919372797,"results":"125","hashOfConfig":"92"},{"size":5271,"mtime":1705921119087,"results":"126","hashOfConfig":"92"},{"size":8205,"mtime":1705921132627,"results":"127","hashOfConfig":"92"},{"size":5268,"mtime":1705919679178,"results":"128","hashOfConfig":"92"},{"size":305,"mtime":1705675113818,"results":"129","hashOfConfig":"92"},{"size":2262,"mtime":1703081786902,"results":"130","hashOfConfig":"92"},{"size":4483,"mtime":1705920336474,"results":"131","hashOfConfig":"92"},{"size":10550,"mtime":1705919647214,"results":"132","hashOfConfig":"92"},{"size":2853,"mtime":1705412668411,"results":"133","hashOfConfig":"92"},{"size":8769,"mtime":1705742170686,"results":"134","hashOfConfig":"92"},{"size":660,"mtime":1705921145608,"results":"135","hashOfConfig":"92"},{"size":4632,"mtime":1704800357412,"results":"136","hashOfConfig":"92"},{"size":3189,"mtime":1704800357414,"results":"137","hashOfConfig":"92"},{"size":1428,"mtime":1704800357414,"results":"138","hashOfConfig":"92"},{"size":1315,"mtime":1704800357417,"results":"139","hashOfConfig":"92"},{"size":1529,"mtime":1704800357416,"results":"140","hashOfConfig":"92"},{"size":4912,"mtime":1705919616150,"results":"141","hashOfConfig":"92"},{"size":3067,"mtime":1704800357421,"results":"142","hashOfConfig":"92"},{"size":334,"mtime":1700232243479,"results":"143","hashOfConfig":"92"},{"size":272,"mtime":1705675113820,"results":"144","hashOfConfig":"92"},{"size":3775,"mtime":1705692040192,"results":"145","hashOfConfig":"92"},{"size":947,"mtime":1700139305731,"results":"146","hashOfConfig":"92"},{"size":506,"mtime":1705663476769,"results":"147","hashOfConfig":"92"},{"size":1413,"mtime":1701425260574,"results":"148","hashOfConfig":"92"},{"size":1629,"mtime":1704800385190,"results":"149","hashOfConfig":"92"},{"size":680,"mtime":1700232205898,"results":"150","hashOfConfig":"92"},{"size":1041,"mtime":1700139305732,"results":"151","hashOfConfig":"92"},{"size":1977,"mtime":1703081898406,"results":"152","hashOfConfig":"92"},{"size":417,"mtime":1700129839470,"results":"153","hashOfConfig":"92"},{"size":1084,"mtime":1701425260575,"results":"154","hashOfConfig":"92"},{"size":4205,"mtime":1705921172493,"results":"155","hashOfConfig":"92"},{"size":734,"mtime":1701425260576,"results":"156","hashOfConfig":"92"},{"size":1786,"mtime":1705412272527,"results":"157","hashOfConfig":"92"},{"size":748,"mtime":1701425260577,"results":"158","hashOfConfig":"92"},{"size":404,"mtime":1703081786921,"results":"159","hashOfConfig":"92"},{"size":848,"mtime":1701425260579,"results":"160","hashOfConfig":"92"},{"size":1200,"mtime":1701425260580,"results":"161","hashOfConfig":"92"},{"size":778,"mtime":1701425260580,"results":"162","hashOfConfig":"92"},{"size":391,"mtime":1703081786923,"results":"163","hashOfConfig":"92"},{"size":3658,"mtime":1705412272528,"results":"164","hashOfConfig":"92"},{"size":5107,"mtime":1705412272529,"results":"165","hashOfConfig":"92"},{"size":885,"mtime":1705675113826,"results":"166","hashOfConfig":"92"},{"size":813,"mtime":1705341256271,"results":"167","hashOfConfig":"92"},{"size":5237,"mtime":1705744454723,"results":"168","hashOfConfig":"92"},{"size":8126,"mtime":1705412272531,"results":"169","hashOfConfig":"92"},{"size":2571,"mtime":1705412312778,"results":"170","hashOfConfig":"92"},{"size":372,"mtime":1704800385197,"results":"171","hashOfConfig":"92"},{"size":711,"mtime":1704800385197,"results":"172","hashOfConfig":"92"},{"size":503,"mtime":1703081786928,"results":"173","hashOfConfig":"92"},{"size":396,"mtime":1700126129285,"results":"174","hashOfConfig":"92"},{"size":1545,"mtime":1705403562603,"results":"175","hashOfConfig":"92"},{"size":1184,"mtime":1705663476755,"results":"176","hashOfConfig":"92"},{"size":1522,"mtime":1704803892336,"results":"177","hashOfConfig":"92"},{"size":1074,"mtime":1705412272513,"results":"178","hashOfConfig":"92"},{"size":887,"mtime":1705342754372,"results":"179","hashOfConfig":"92"},{"size":2011,"mtime":1705412272513,"results":"180","hashOfConfig":"92"},{"size":6710,"mtime":1705692089753,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12q9s8r",{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375"},{"filePath":"376","messages":"377","suppressedMessages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","suppressedMessages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","suppressedMessages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","suppressedMessages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","suppressedMessages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","suppressedMessages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\about\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\basket\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\filter-page\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\filter-page\\[type]\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\catalogue\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\BasketComponents\\Basket.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\BasketComponents\\BasketRow.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Brands\\BrandsGallery.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\breadcrumbs\\Breadcrumbs.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\breadcrumbs\\Breadcrumbs.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\card\\Card.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\card\\FilterCards.tsx",["463"],[],"'use client';\r\nimport { setData } from '@/app/Redux/slice/query/query';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { useEffect, useState } from 'react';\r\nimport Image from 'next/image';\r\nimport './Cards.scss';\r\nimport ProductTag from '@/app/common/ui/product-ui/ProductTag';\r\nimport Loading from '../Loading/Loading';\r\nimport { categories } from '@/app/common/types/types';\r\nimport PrimaryBtn from '@/app/common/ui/buttons/primary/PrimaryBtn';\r\nimport IconRenderer from '@/app/common/ui/Icons/IconRenderer';\r\nimport ProductAvailability from '@/app/common/ui/product-ui/ProductAvailability';\r\nimport { addProduct } from '@/app/Redux/slice/basket/basketSlice';\r\nimport { IProduct } from '@/app/common/types/types';\r\nimport { addFavProduct } from '@/app/Redux/slice/favs/favsSlice';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface IMatrixCard {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        backlight_type: string;\r\n        connector: string;\r\n        diagonale: number;\r\n        price: number;\r\n        name: string;\r\n        hashrate: number;\r\n        permission: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\ninterface IBatteryCard {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        capacity: number;\r\n        type: string;\r\n        voltage: number;\r\n        price: number;\r\n        name: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\ninterface IHddCard {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        technology: string;\r\n        connector: string;\r\n        memory: number;\r\n        price: number;\r\n        name: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\ninterface IKeyboard {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        form_factor: string;\r\n        layout: string;\r\n        color: number;\r\n        backlight: string;\r\n        price: number;\r\n        name: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\ninterface IRam {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        pin_quantity: string;\r\n        voltage: string;\r\n        memory_mb: string;\r\n        price: number;\r\n        name: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\ninterface IPowerSupply {\r\n    id: number;\r\n    attributes: {\r\n        availability: string;\r\n        voltage: string;\r\n        amperage: string;\r\n        power: string;\r\n        price: number;\r\n        name: string;\r\n        tag: string;\r\n        photo: {\r\n            data: [\r\n                {\r\n                    attributes: {\r\n                        url: string;\r\n                    };\r\n                }\r\n            ];\r\n        };\r\n    };\r\n}\r\n\r\nconst FilterCards = ({ type }: { type: categories }) => {\r\n    const router = useRouter();\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.data.data);\r\n    const favData = useAppSelector((state) => state.favsReducer.products);\r\n    const basketData = useAppSelector((state) => state.basketReducer.products);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (selector && selector.length > 0) {\r\n                return;\r\n            } else {\r\n                const res = await getFilterItemData(type + '?populate=*');\r\n                dispatch(setData(res));\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    const RenderProperFilter = (): React.ReactElement[] => {\r\n        switch (type) {\r\n            case 'matrices':\r\n                return selector.map((el: IMatrixCard, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p className='card__name'>{el.attributes.name}</p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Диагональ: <span>{el.attributes.diagonale}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Тип крепления: <span>{el.attributes.connector}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Разрешение: <span>{el.attributes.permission}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'matrices',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'matrices',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'matrices',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            case 'batteries':\r\n                return selector.map((el: IBatteryCard, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        router.push(`/product/batteries/${el.id}`);\r\n                                    }}\r\n                                    className='card__name'>\r\n                                    {el.attributes.name}\r\n                                </p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Ёмкость: <span>{el.attributes.capacity}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Вольтаж: <span>{el.attributes.voltage}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Тип: <span>{el.attributes.type}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'batteries',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'batteries',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'batteries',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            case 'hdds':\r\n                return selector.map((el: IHddCard, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        router.push(`/product/hdds/${el.id}`);\r\n                                    }}\r\n                                    className='card__name'>\r\n                                    {el.attributes.name}\r\n                                </p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Объем памяти: <span>{el.attributes.memory}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Разьем подключения: <span>{el.attributes.connector}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Технология: <span>{el.attributes.technology}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'matrices',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'hdds',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'hdds',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            case 'keyboards':\r\n                return selector.map((el: IKeyboard, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        router.push(`/product/keyboards/${el.id}`);\r\n                                    }}\r\n                                    className='card__name'>\r\n                                    {el.attributes.name}\r\n                                </p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Форм-фактор: <span>{el.attributes.form_factor}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Раскладка: <span>{el.attributes.layout}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Подсветка: <span>{el.attributes.backlight}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'keyboards',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'keyboards',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'keyboards',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            case 'rams':\r\n                return selector.map((el: IRam, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        router.push(`/product/rams/${el.id}`);\r\n                                    }}\r\n                                    className='card__name'>\r\n                                    {el.attributes.name}\r\n                                </p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Озу: <span>{el.attributes.memory_mb}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Кол-во контактов: <span>{el.attributes.pin_quantity}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Напряжение: <span>{el.attributes.voltage}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'rams',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'rams',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'rams',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            case 'power-Supplies':\r\n                return selector.map((el: IPowerSupply, index) => {\r\n                    return (\r\n                        <div key={index} className='card'>\r\n                            <div className='card__tag'>\r\n                                <ProductTag type={el.attributes.tag as 'discount' | 'new' | 'salesHit'}></ProductTag>\r\n                            </div>\r\n                            <Image alt='cardimg' src={el.attributes.photo.data[0].attributes.url} height={152} width={152} />\r\n                            <div className='card__data_center'>\r\n                                <p\r\n                                    onClick={() => {\r\n                                        router.push(`/product/power-Supplies/${el.id}`);\r\n                                    }}\r\n                                    className='card__name'>\r\n                                    {el.attributes.name}\r\n                                </p>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Напряжение: <span>{el.attributes.amperage}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Ёмкость: <span>{el.attributes.power}</span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className='card__etc-params'>\r\n                                    <p>\r\n                                        Напряжение: <span>{el.attributes.voltage}</span>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='card__availability'>\r\n                                <ProductAvailability type={el.attributes.availability as 'available' | 'ending' | 'outOfStock'}></ProductAvailability>\r\n                            </div>\r\n                            <div\r\n                                className='card__like-sign'\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        addFavProduct({\r\n                                            ...el.attributes,\r\n                                            photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                            tag: el.attributes.tag,\r\n                                            discount: 0,\r\n                                            category: 'power-Supplies',\r\n                                            id: el.id,\r\n                                        })\r\n                                    );\r\n                                }}>\r\n                                <IconRenderer\r\n                                    id='heart-icon'\r\n                                    className={`heart-icon ${\r\n                                        favData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? 'active' : ''\r\n                                    }`}\r\n                                />\r\n                            </div>\r\n                            <div className='card__data_right'>\r\n                                <p className='card__price'>{el.attributes.price} грн</p>\r\n                                {basketData.find((innerEl) => innerEl.id === el.id && innerEl.name === el.attributes.name) ? (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'power-Supplies',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='В корзине'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                ) : (\r\n                                    <PrimaryBtn\r\n                                        onClick={() => {\r\n                                            dispatch(\r\n                                                addProduct({\r\n                                                    photo_url: el.attributes.photo.data[0].attributes.url,\r\n                                                    price: el.attributes.price,\r\n                                                    name: el.attributes.name,\r\n                                                    id: el.id,\r\n                                                    category: 'power-Supplies',\r\n                                                })\r\n                                            );\r\n                                        }}\r\n                                        text='Купить'\r\n                                        type='basket'\r\n                                        icon={<IconRenderer id='basket-icon' />}></PrimaryBtn>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n            default:\r\n                return [];\r\n        }\r\n    };\r\n\r\n    if (!selector) {\r\n        return <Loading />;\r\n    }\r\n    return (\r\n        <div className='card-wr'>\r\n            <RenderProperFilter />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilterCards;\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\CatalogueItem\\CatalogueItem.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Categories\\CategoriesRow.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Categories\\CategoryGallery.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ContactForms\\ContactForms.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\FeaturesComponent\\Features.tsx",["464"],[],"\"use client\";\r\nimport React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport IconRenderer from \"../../ui/Icons/IconRenderer\";\r\nimport \"./Features.scss\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/dist/client/link\";\r\nimport axios from \"axios\";\r\nimport { useAppSelector } from \"@/app/Redux/store\";\r\nimport { IProduct, categories } from \"../../types/types\";\r\nimport FeaturesCard from \"./FeaturesCard\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport { fetchFeaturedProducts } from \"@/app/lib/data\";\r\n\r\nconst Features = ({}) => {\r\n\tconst [filterType, setFilterType] = useState<string>(\"new\");\r\n\tconst [loading, setLoading] = useState<boolean>(false); // New loading state\r\n\r\n\tconst productTypes: categories[] = [\"matrices\", \"batteries\", \"hdds\", \"keyboards\", \"rams\", \"power-Supplies\"];\r\n\r\n\tconst [products, setProducts] = useState<IProduct[]>([]);\r\n\tconst productsInBasket = useAppSelector((state) => state.basketReducer.products);\r\n\tconst productsInFavs = useAppSelector((state) => state.favsReducer.products);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst promises = productTypes.map((type) => fetchFeaturedProducts(type, filterType));\r\n\r\n\t\tconst fetchAllFeaturedProducts = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tsetLoading(true); // Set loading to true when starting the fetch\r\n\t\t\t\tconst productDataArray = await Promise.all(promises);\r\n\t\t\t\tconst allProducts = productDataArray.flat();\r\n\t\t\t\tsetProducts(allProducts);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error getting all product data:\", error);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false); // Set loading to false when fetch is completed (either success or error)\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfetchAllFeaturedProducts();\r\n\t}, [filterType]);\r\n\r\n\tconst [showState, setShowState] = useState<boolean>(false);\r\n\r\n\treturn (\r\n\t\t<div className=\"features__wrapper\">\r\n\t\t\t<div className=\"features\">\r\n\t\t\t\t<div className=\"features__nav\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={`features__nav-item ${filterType === \"new\" ? \"active\" : \"\"}`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetFilterType(\"new\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"features__nav-icon\">\r\n\t\t\t\t\t\t\t<IconRenderer id=\"features-lightning-sign\"></IconRenderer>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\tНовые поступления\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={`features__nav-item ${filterType === \"salesHit\" ? \"active\" : \"\"}`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetFilterType(\"salesHit\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"features__nav-icon\">\r\n\t\t\t\t\t\t\t<IconRenderer id=\"features-fire-sign\"></IconRenderer>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\tХиты продаж\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={`features__nav-item ${filterType === \"discount\" ? \"active\" : \"\"}`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetFilterType(\"discount\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"features__nav-icon\">\r\n\t\t\t\t\t\t\t<IconRenderer id=\"features-discount-sign\"></IconRenderer>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\tСкидки\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={`features__content ${showState ? \"show\" : \"\"}`}>\r\n\t\t\t\t\t{loading ? (\r\n\t\t\t\t\t\t<div className=\"spinner-container\">\r\n\t\t\t\t\t\t\t<Spinner classname=\"features__spinner\" white={true}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : products.length > 0 ? (\r\n\t\t\t\t\t\tproducts.map((product, index) => {\r\n\t\t\t\t\t\t\tconst foundProduct = productsInBasket.find((basketProduct) => basketProduct.name === product.name);\r\n\t\t\t\t\t\t\tconst isBought = !!foundProduct;\r\n\r\n\t\t\t\t\t\t\tconst foundFav = productsInFavs.find((favProduct) => favProduct.name === product.name);\r\n\t\t\t\t\t\t\tconst isFav = !!foundFav;\r\n\r\n\t\t\t\t\t\t\treturn <FeaturesCard key={index} product={product} isBought={isBought} isFav={isFav} />;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>No products found</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<div className={`features__show-hide-block ${showState ? \"show\" : \"\"}`}>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"features__show-hide-button\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetShowState(!showState);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{showState ? \"Смотреть меньше\" : \"Посмотреть ещё\"}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Features;\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\FeaturesComponent\\FeaturesCard.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\Filter.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterBattery.tsx",["465","466"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc } from '@/app/lib/service';\r\nimport clsx from 'clsx';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\n\r\nlet [capacity, voltage, type, color]: any = '';\r\n\r\nexport default function FilterBattery() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'batteries' ? selector : []);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const capacityRow: any = getFilterItemData('batteries?fields[0]=capacity&sort[0]=capacity:asc');\r\n            const voltageRow: any = getFilterItemData('batteries?fields[0]=voltage&sort[0]=voltage:asc');\r\n            const typeRow: any = getFilterItemData('batteries?fields[0]=type&sort[0]=type:asc');\r\n            const colorRow: any = getFilterItemData('batteries?fields[0]=color&sort[0]=color:asc');\r\n\r\n            [capacity, voltage, type, color] = await Promise.all([capacityRow, voltageRow, typeRow, colorRow]);\r\n\r\n            makeUniqueAndLoopFunc(capacity, 'capacity');\r\n\r\n            makeUniqueAndLoopFunc(voltage, 'voltage');\r\n\r\n            makeUniqueAndLoopFunc(type, 'type');\r\n\r\n            makeUniqueAndLoopFunc(color, 'color');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'capacity') {\r\n                        result.push({ searchParam: 'capacity', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'voltage') {\r\n                        result.push({ searchParam: 'voltage', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n\r\n                console.log(result);\r\n\r\n                if (result.length > 1) {\r\n                    capacity.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.capacity === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.capacity];\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    voltage.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.voltage === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.voltage];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('batteries'));\r\n        } else if (prevType === 'batteries') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('batteries'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'batteries');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Ёмкость</p>\r\n                                <p className='filter_item__descr'>Ёмкость аккумулятора</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {capacity.data.map((el: { id: number; attributes: { [key: string]: string } }) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.capacity), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'capacity');\r\n                                                })();\r\n                                                if (choosenFilterParametrs.includes(el.attributes.capacity)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.capacity);\r\n\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.capacity];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            <>\r\n                                                {el.attributes.capacity} <p>({el.attributes.numOfOccurance})</p>\r\n                                            </>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Напряжение</p>\r\n                                <p className='filter_item__descr'>Напряжение аккумулятора</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {voltage.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.voltage), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'voltage');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.voltage)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.voltage);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.voltage];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.voltage} <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Tип</p>\r\n                                <p className='filter_item__descr'>Tип аккумулятора</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {type.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.type), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'type');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.type)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.type);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.type];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.type}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Цвет</p>\r\n                                <p className='filter_item__descr'>Цвет аккумулятора</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {color.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.color), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'color');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.color)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.color);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.color];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.color}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='batteries'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterHdd.tsx",["467","468"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc, onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\nimport clsx from 'clsx';\r\n\r\nlet [memory, connector, technology]: any = '';\r\n\r\nexport default function FilterHdds() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'hdds' ? selector : []);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const memoryRow: any = getFilterItemData('hdds?fields[0]=memory_mb');\r\n            const connectorRow: any = getFilterItemData('hdds?fields[0]=connector');\r\n            const technologyTypeRow: any = getFilterItemData('hdds?fields[0]=technology');\r\n\r\n            [memory, connector, technology] = await Promise.all([memoryRow, connectorRow, technologyTypeRow]);\r\n\r\n            memory as {\r\n                data: { id: number; attributes: { memory_mb: number; active: boolean; numOfOccurance: number } }[];\r\n            };\r\n\r\n            makeUniqueAndLoopFunc(memory, 'memory_mb');\r\n\r\n            makeUniqueAndLoopFunc(connector, 'connector');\r\n\r\n            makeUniqueAndLoopFunc(technology, 'technology');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                console.log('here');\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'technology') {\r\n                        result.push({ searchParam: 'technology', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'memory_mb') {\r\n                        result.push({ searchParam: 'memory_mb', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n                if (result.length > 1) {\r\n                    technology.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.technology === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.technology];\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    memory.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.memory_mb === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.memory_mb];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('hdds'));\r\n        } else if (prevType === 'hdds') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('hdds'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'hdds');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Ёмкость</p>\r\n                                <p className='filter_item__descr'>Ёмкость аккумулятора</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {memory.data.map(\r\n                                        (el: { id: number; attributes: { memory_mb: number; active: boolean; numOfOccurance: number } }, id: number) => (\r\n                                            <li\r\n                                                key={el.id}\r\n                                                className={`${choosenFilterParametrs.includes(el.attributes.memory_mb) ? 'active' : ''} filter_item__value`}\r\n                                                onClick={(e) => {\r\n                                                    (async function () {\r\n                                                        await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'memory_mb');\r\n                                                    })();\r\n\r\n                                                    if (choosenFilterParametrs.includes(el.attributes.memory_mb)) {\r\n                                                        const index = choosenFilterParametrs.indexOf(el.attributes.memory_mb);\r\n\r\n                                                        setChoosenFilterParametrs((prev) => {\r\n                                                            const newList = prev.filter((el, i) => i !== index);\r\n                                                            return newList;\r\n                                                        });\r\n                                                    } else {\r\n                                                        setChoosenFilterParametrs((prev) => {\r\n                                                            return [...prev, el.attributes.memory_mb];\r\n                                                        });\r\n                                                    }\r\n\r\n                                                    e.stopPropagation();\r\n                                                }}>\r\n                                                {el.attributes.memory_mb}\r\n                                                <p>({el.attributes.numOfOccurance})</p>\r\n                                            </li>\r\n                                        )\r\n                                    )}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Разьем подключения</p>\r\n                                <p className='filter_item__descr'>Разьем подключения</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {connector.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={`${choosenFilterParametrs.includes(el.attributes.connector) ? 'active' : ''} filter_item__value`}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'connector');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.connector)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.connector);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.connector];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.connector}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Tип</p>\r\n                                <p className='filter_item__descr'>Tип аккумулятора</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {technology.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.technology), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'technology');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.technology)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.technology);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.technology];\r\n                                                    });\r\n                                                }\r\n                                            }}>\r\n                                            {el.attributes.technology}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='hdds'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterKeyboard.tsx",["469","470"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc } from '@/app/lib/service';\r\nimport clsx from 'clsx';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\n\r\nlet [form_factor, layout, color, backlight]: any = '';\r\n\r\nexport default function FilterKeyboard() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'keyboards' ? selector : []);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const form_factorRow: any = getFilterItemData('keyboards?fields[0]=form_factor&sort[0]=form_factor:asc');\r\n            const layoutRow: any = getFilterItemData('keyboards?fields[0]=layout&sort[0]=layout:asc');\r\n            const colorRow: any = getFilterItemData('keyboards?fields[0]=color&sort[0]=color:asc');\r\n            const backlightRow: any = getFilterItemData('keyboards?fields[0]=backlight&sort[0]=backlight:asc');\r\n\r\n            [form_factor, layout, color, backlight] = await Promise.all([form_factorRow, layoutRow, colorRow, backlightRow]);\r\n\r\n            makeUniqueAndLoopFunc(form_factor, 'diagonale');\r\n\r\n            makeUniqueAndLoopFunc(layout, 'layout');\r\n\r\n            makeUniqueAndLoopFunc(color, 'color');\r\n\r\n            makeUniqueAndLoopFunc(backlight, 'connector');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                console.log('here');\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'form_factor') {\r\n                        result.push({ searchParam: 'form_factor', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'layout') {\r\n                        result.push({ searchParam: 'layout', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n\r\n                if (result.length > 1) {\r\n                    form_factor.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.form_factor === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.form_factor];\r\n                            });\r\n                        }\r\n                    });\r\n                    layout.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.layout === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.layout];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('keyboards'));\r\n        } else if (prevType === 'keyboards') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('keyboards'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'keyboards');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Форм фактор</p>\r\n                                <p className='filter_item__descr'>Форм фактор клавиатуры</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {form_factor.data.map((el: { id: number; attributes: { [key: string]: string } }) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={`${choosenFilterParametrs.includes(el.attributes.form_factor) ? 'active' : ''} filter_item__value`}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'form_factor');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.form_factor)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.form_factor);\r\n\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.form_factor];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            <>\r\n                                                {el.attributes.form_factor} <p>({el.attributes.numOfOccurance})</p>\r\n                                            </>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Раскладка</p>\r\n                                <p className='filter_item__descr'>Раскладка клавиатуры</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {layout.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({\r\n                                                active: choosenFilterParametrs.includes(el.attributes.layout),\r\n                                                filter_item__value: true,\r\n                                            })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'layout');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.layout)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.layout);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.layout];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.layout}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Цвет</p>\r\n                                <p className='filter_item__descr'>Цвет клавиатуры</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {color.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.color), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'color');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.color)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.color);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.color];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.color}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Подсветка</p>\r\n                                <p className='filter_item__descr'>Подсветка клавиатуры</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {backlight.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({\r\n                                                active: choosenFilterParametrs.includes(el.attributes.backlight),\r\n                                                filter_item__value: true,\r\n                                            })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'backlight');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.backlight)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.backlight);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.backlight];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.backlight}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='keyboards'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterMatrix.tsx",["471","472"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc } from '@/app/lib/service';\r\nimport clsx from 'clsx';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\n\r\nlet [diagonale, permission, fastening, fiberOpticTechnology, connector, backlightType, hashrate]: any = '';\r\n\r\nexport default function FilterMatrix() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'matrices' ? selector : []);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const diagonaleRow: any = getFilterItemData('matrices?fields[0]=diagonale&sort[0]=diagonale:asc');\r\n            const permissionRow: any = getFilterItemData('matrices?fields[0]=permission&sort[0]=permission:asc');\r\n            const fasteningRow: any = getFilterItemData('matrices?fields[0]=fastening&sort[0]=fastening:asc');\r\n            const connectorRow: any = getFilterItemData('matrices?fields[0]=connector&sort[0]=connector:asc');\r\n            const fiberOpticTechnologyRow: any = getFilterItemData('matrices?fields[0]=fiber_optic_technology&sort[0]=fiber_optic_technology:asc');\r\n            const backlightTypeRow: any = getFilterItemData('matrices?fields[0]=backlight_type&sort[0]=backlight_type:asc');\r\n            const hashrateRow: any = getFilterItemData('matrices?fields[0]=hashrate&sort[0]=hashrate:asc');\r\n\r\n            [diagonale, permission, fastening, connector, fiberOpticTechnology, backlightType, hashrate] = await Promise.all([\r\n                diagonaleRow,\r\n                permissionRow,\r\n                fasteningRow,\r\n                connectorRow,\r\n                fiberOpticTechnologyRow,\r\n                backlightTypeRow,\r\n                hashrateRow,\r\n            ]);\r\n\r\n            makeUniqueAndLoopFunc(diagonale, 'diagonale');\r\n\r\n            makeUniqueAndLoopFunc(permission, 'permission');\r\n\r\n            makeUniqueAndLoopFunc(fastening, 'fastening');\r\n\r\n            makeUniqueAndLoopFunc(connector, 'connector');\r\n\r\n            makeUniqueAndLoopFunc(fiberOpticTechnology, 'fiber_optic_technology');\r\n\r\n            makeUniqueAndLoopFunc(backlightType, 'backlight_type');\r\n\r\n            makeUniqueAndLoopFunc(hashrate, 'hashrate');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                console.log('here');\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'permission') {\r\n                        result.push({ searchParam: 'permission', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'fastening') {\r\n                        result.push({ searchParam: 'fastening', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n\r\n                if (result.length > 1) {\r\n                    permission.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.permission === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.permission];\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    fastening.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.fastening === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.fastening];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('matrices'));\r\n        } else if (prevType === 'matrices') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('matrices'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'matrices');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Диагональ</p>\r\n                                <p className='filter_item__descr'>Диагональ матрицы</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {diagonale.data.map((el: { id: number; attributes: { [key: string]: string } }) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={`${choosenFilterParametrs.includes(el.attributes.diagonale) ? 'active' : ''} filter_item__value`}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'diagonale');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.diagonale)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.diagonale);\r\n\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.diagonale];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            <>\r\n                                                {el.attributes.diagonale} <p>({el.attributes.numOfOccurance})</p>\r\n                                            </>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Разрешение</p>\r\n                                <p className='filter_item__descr'>Разрешение матрицы</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {permission.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({\r\n                                                active: choosenFilterParametrs.includes(el.attributes.permission),\r\n                                                filter_item__value: true,\r\n                                            })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'permission');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.permission)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.permission);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.permission];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.permission}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Крепление</p>\r\n                                <p className='filter_item__descr'>Tип крепления</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {fastening.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.fastening), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'fastening');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.fastening)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.fastening);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.fastening];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.fastening}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Опт. технология</p>\r\n                                <p className='filter_item__descr'>Тип опт. технологии</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {fiberOpticTechnology.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({\r\n                                                active: choosenFilterParametrs.includes(el.attributes.fiber_optic_technology),\r\n                                                filter_item__value: true,\r\n                                            })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'fiber_optic_technology');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.fiber_optic_technology)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.fiber_optic_technology);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.fiber_optic_technology];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.fiber_optic_technology}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Цвет</p>\r\n                                <p className='filter_item__descr'>Цвет подсветки</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {backlightType.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({\r\n                                                active: choosenFilterParametrs.includes(el.attributes.backlight_type),\r\n                                                filter_item__value: true,\r\n                                            })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'backlight_type');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.backlight_type)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.backlight_type);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.backlight_type];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.backlight_type}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Частота обнов.</p>\r\n                                <p className='filter_item__descr'>Частота обнов.</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {hashrate.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.hashrate), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'hashrate');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.hashrate)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.hashrate);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.hashrate];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.hashrate}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='matrices'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterPowerSupply.tsx",["473","474"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc } from '@/app/lib/service';\r\nimport clsx from 'clsx';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\n\r\nlet [power, voltage, amperage, form_factor]: any = '';\r\n\r\nexport default function FilterPower() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'power-Supplies' ? selector : []);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const powerRow: any = getFilterItemData('power-Supplies?fields[0]=power&sort[0]=power:asc');\r\n            const voltageRow: any = getFilterItemData('power-Supplies?fields[0]=voltage&sort[0]=voltage:asc');\r\n            const amperageRow: any = getFilterItemData('power-Supplies?fields[0]=amperage&sort[0]=amperage:asc');\r\n            const form_factorRow: any = getFilterItemData('power-Supplies?fields[0]=form_factor&sort[0]=form_factor:asc');\r\n\r\n            [power, voltage, amperage, form_factor] = await Promise.all([powerRow, voltageRow, amperageRow, form_factorRow]);\r\n\r\n            makeUniqueAndLoopFunc(power, 'power');\r\n\r\n            makeUniqueAndLoopFunc(voltage, 'voltage');\r\n\r\n            makeUniqueAndLoopFunc(amperage, 'amperage');\r\n\r\n            makeUniqueAndLoopFunc(form_factor, 'form_factor');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'voltage') {\r\n                        result.push({ searchParam: 'voltage', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'form_factor') {\r\n                        result.push({ searchParam: 'form_factor', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n                if (result.length > 1) {\r\n                    voltage.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.voltage === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.voltage];\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    form_factor.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.form_factor === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.form_factor];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('power-Supplies'));\r\n        } else if (prevType === 'power-Supplies') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('power-Supplies'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'power-Supplies');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Ёмкость</p>\r\n                                <p className='filter_item__descr'>Ёмкость блока питания</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {power.data.map((el: { id: number; attributes: { [key: string]: string } }) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.power), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'power');\r\n                                                })();\r\n                                                if (choosenFilterParametrs.includes(el.attributes.power)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.power);\r\n\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.power];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            <>\r\n                                                {el.attributes.power} А-ч<p>({el.attributes.numOfOccurance})</p>\r\n                                            </>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Напряжение</p>\r\n                                <p className='filter_item__descr'>Напряжение блока питания</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {voltage.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.voltage), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'voltage');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.voltage)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.voltage);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.voltage];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.voltage} <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Tип</p>\r\n                                <p className='filter_item__descr'>Tип блока питания</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {amperage.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.amperage), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'amperage');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.amperage)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.amperage);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.amperage];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.amperage}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Форм фактор</p>\r\n                                <p className='filter_item__descr'>Цвет блока питания</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {form_factor.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.form_factor), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'form_factor');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.form_factor)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.form_factor);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.form_factor];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.form_factor}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='power-Supplies'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\FilterRam.tsx",["475","476"],[],"'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { v1 } from 'uuid';\r\nimport Loading from '../../Loading/Loading';\r\nimport { filterItemOnclickHandler, makeUniqueAndLoopFunc } from '@/app/lib/service';\r\nimport clsx from 'clsx';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { IQuery } from '@/app/common/types/types';\r\nimport { onFilterItemClickHandler } from '@/app/lib/service';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport { setQueryArr as setQueriesArrRed } from '@/app/Redux/slice/query/query';\r\nimport TopFilter from './TopFilter/TopFilter';\r\n\r\nlet [pin_quantity, jedec, voltage, memory_mb, frequency_mhz, memory_type]: any = '';\r\n\r\nexport default function FilterRam() {\r\n    const [choosenFilterParametrs, setChoosenFilterParametrs] = useState<(string | number)[]>([]);\r\n\r\n    const prevType = useAppSelector((state) => state.queryReducer.type);\r\n\r\n    const selector = useAppSelector((state) => state.queryReducer.queryArr);\r\n\r\n    const [queriesArr, setQueriesArr] = useState<IQuery[]>(prevType === 'rams' ? selector : []);\r\n\r\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const substrateRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const pin_quantityRow: any = getFilterItemData('rams?fields[0]=pin_quantity&sort[0]=pin_quantity:asc');\r\n            const voltageRow: any = getFilterItemData('rams?fields[0]=voltage&sort[0]=voltage:asc');\r\n            const jedecRow: any = getFilterItemData('rams?fields[0]=jedec&sort[0]=jedec:asc');\r\n            const memory_mbRow: any = getFilterItemData('rams?fields[0]=memory_mb&sort[0]=memory_mb:asc');\r\n            const frequency_mhzRow: any = getFilterItemData('rams?fields[0]=frequency_mhz&sort[0]=frequency_mhz:asc');\r\n            const memory_typeRow: any = getFilterItemData('rams?fields[0]=memory_type&sort[0]=memory_type:asc');\r\n\r\n            [pin_quantity, voltage, jedec, memory_mb, frequency_mhz, memory_type] = await Promise.all([\r\n                pin_quantityRow,\r\n                voltageRow,\r\n                jedecRow,\r\n                memory_mbRow,\r\n                frequency_mhzRow,\r\n                memory_typeRow,\r\n            ]);\r\n\r\n            makeUniqueAndLoopFunc(pin_quantity, 'pin_quantity');\r\n\r\n            makeUniqueAndLoopFunc(voltage, 'voltage');\r\n\r\n            makeUniqueAndLoopFunc(jedec, 'jedec');\r\n\r\n            makeUniqueAndLoopFunc(memory_mb, 'memory_mb');\r\n\r\n            makeUniqueAndLoopFunc(frequency_mhz, 'frequency_mhz');\r\n\r\n            makeUniqueAndLoopFunc(memory_type, 'memory_type');\r\n\r\n            setIsLoaded(true);\r\n\r\n            if (queriesArr.length > 0) {\r\n                const result: { searchParam: string; searchParamKey: string[] }[] = [];\r\n\r\n                queriesArr.forEach((el) => {\r\n                    if (el.searchParam === 'voltage') {\r\n                        result.push({ searchParam: 'voltage', searchParamKey: el.searchParamKeys });\r\n                    } else if (el.searchParam === 'jedec') {\r\n                        result.push({ searchParam: 'jedec', searchParamKey: el.searchParamKeys });\r\n                    }\r\n                });\r\n                if (result.length > 1) {\r\n                    voltage.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.voltage === result[0].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.voltage];\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    jedec.data.forEach((el: { id: number; attributes: { [key: string]: string } }) => {\r\n                        if (el.attributes.jedec === result[1].searchParamKey[0]) {\r\n                            setChoosenFilterParametrs((prev) => {\r\n                                return [...prev, el.attributes.jedec];\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                console.log(queriesArr.length);\r\n            }\r\n        };\r\n\r\n        if (!prevType) {\r\n            dispatch(setType('rams'));\r\n        } else if (prevType === 'rams') {\r\n            setQueriesArr(selector);\r\n        } else {\r\n            dispatch(setType('rams'));\r\n            dispatch(setDefaultDataAndQueryArr());\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const resetQueryArrOnReload = () => dispatch(setDefaultDataAndQueryArr());\r\n\r\n        window.addEventListener('beforeunload', resetQueryArrOnReload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', resetQueryArrOnReload);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            document.body.style.overflow = 'hidden';\r\n            substrateRef.current?.classList.add('active');\r\n        } else {\r\n            substrateRef.current?.classList.remove('active');\r\n            document.body.style.overflow = 'auto';\r\n            substrateRef.current?.classList.remove('active');\r\n        }\r\n    }, [isActive]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await filterItemOnclickHandler(queriesArr, 'rams');\r\n\r\n            dispatch(setData(res));\r\n            dispatch(setQueriesArrRed(queriesArr));\r\n        })();\r\n    }, [queriesArr]);\r\n\r\n    if (!isLoaded) {\r\n        return <Loading></Loading>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='substrate'\r\n                ref={substrateRef}\r\n                onClick={() => {\r\n                    setIsActive(false);\r\n                }}></div>\r\n            <div className='filter-wr'>\r\n                <div className={clsx('filter', { active: isActive })} ref={rootRef}>\r\n                    <p className='filter_title'>Фильтр</p>\r\n                    <div className='filter_items'>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Количество контактов</p>\r\n                                <p className='filter_item__descr'>Количество контактов</p>\r\n                            </div>\r\n\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {pin_quantity.data.map((el: { id: number; attributes: { [key: string]: string } }) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.pin_quantity), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'pin_quantity');\r\n                                                })();\r\n                                                if (choosenFilterParametrs.includes(el.attributes.pin_quantity)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.pin_quantity);\r\n\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.pin_quantity];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            <>\r\n                                                {el.attributes.pin_quantity} <p>({el.attributes.numOfOccurance})</p>\r\n                                            </>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Напряжение</p>\r\n                                <p className='filter_item__descr'>Напряжение аккумулятора</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {voltage.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.voltage), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'voltage');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.voltage)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.voltage);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.voltage];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.voltage} <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>JEDEC</p>\r\n                                <p className='filter_item__descr'>JEDEC СТАНДАРТ</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {jedec.data.map((el: any) => (\r\n                                        <li\r\n                                            key={el.id}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.jedec), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'jedec');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.jedec)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.jedec);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.jedec];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.jedec}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Объем памяти</p>\r\n                                <p className='filter_item__descr'>Объем памяти озу</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {memory_mb.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.memory_mb), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'memory_mb');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.memory_mb)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.memory_mb);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.memory_mb];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.memory_mb}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Тактовая частота</p>\r\n                                <p className='filter_item__descr'>Тактовая частота</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {frequency_mhz.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.frequency_mhz), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'frequency_mhz');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.frequency_mhz)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.frequency_mhz);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.frequency_mhz];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.frequency_mhz}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className='filter_item'\r\n                            onClick={(e) => {\r\n                                e.currentTarget.classList.toggle('active');\r\n                            }}>\r\n                            <div\r\n                                onClick={(e) => {\r\n                                    if (e.currentTarget.nextElementSibling) {\r\n                                        const sibling = e.currentTarget.nextSibling as HTMLElement;\r\n                                        sibling.classList.toggle('active');\r\n                                    }\r\n                                }}>\r\n                                <p className='filter_item__title'>Объем памяти</p>\r\n                                <p className='filter_item__descr'>Объем памяти озу</p>\r\n                            </div>\r\n                            <div className='filter_item__values'>\r\n                                <ul>\r\n                                    {memory_type.data.map((el: any) => (\r\n                                        <li\r\n                                            key={v1()}\r\n                                            className={clsx({ active: choosenFilterParametrs.includes(el.attributes.memory_type), filter_item__value: true })}\r\n                                            onClick={(e) => {\r\n                                                (async function () {\r\n                                                    await onFilterItemClickHandler(queriesArr, setQueriesArr, el, 'memory_type');\r\n                                                })();\r\n\r\n                                                if (choosenFilterParametrs.includes(el.attributes.memory_type)) {\r\n                                                    const index = choosenFilterParametrs.indexOf(el.attributes.memory_type);\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        const newList = prev.filter((el, i) => i !== index);\r\n                                                        return newList;\r\n                                                    });\r\n                                                } else {\r\n                                                    setChoosenFilterParametrs((prev) => {\r\n                                                        return [...prev, el.attributes.memory_type];\r\n                                                    });\r\n                                                }\r\n\r\n                                                e.stopPropagation();\r\n                                            }}>\r\n                                            {el.attributes.memory_type}\r\n                                            <p>({el.attributes.numOfOccurance})</p>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <TopFilter\r\n                    queriesArr={queriesArr}\r\n                    setQueriesArr={setQueriesArr}\r\n                    isActive={isActive}\r\n                    setIsActive={setIsActive}\r\n                    substrateRef={substrateRef}\r\n                    choosenFilterParametrs={choosenFilterParametrs}\r\n                    setChoosenFilterParametrs={setChoosenFilterParametrs}\r\n                    type='rams'\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\filter\\organisms\\TopFilter\\TopFilter.tsx",["477","478","479"],[],"'use client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from '../../../../ui/form/select/Select';\r\nimport './TopFilter.scss';\r\nimport IconRenderer from '@/app/common/ui/Icons/IconRenderer';\r\nimport { getFilterItemData } from '@/app/lib/data';\r\nimport { useAppDispatch, useAppSelector } from '@/app/Redux/store';\r\nimport { onSelectItemChangeHandler, onStatusItemClickHandler } from '@/app/lib/service';\r\nimport { IQuery, categories } from '@/app/common/types/types';\r\nimport { setData, setDefaultDataAndQueryArr, setType } from '@/app/Redux/slice/query/query';\r\nimport FilterCards from '../../../card/FilterCards';\r\nimport clsx from 'clsx';\r\nimport { v1 } from 'uuid';\r\n\r\ninterface IBrand {\r\n    data: [\r\n        {\r\n            attributes: {\r\n                brand: string;\r\n            };\r\n        }\r\n    ];\r\n}\r\n\r\ninterface IPrice {\r\n    attributes: {\r\n        price: number;\r\n    };\r\n}\r\n\r\nconst TopFilter = ({\r\n    queriesArr,\r\n    setQueriesArr,\r\n    isActive,\r\n    setIsActive,\r\n    substrateRef,\r\n    choosenFilterParametrs,\r\n    setChoosenFilterParametrs,\r\n    type,\r\n}: {\r\n    queriesArr: IQuery[];\r\n    setQueriesArr: React.Dispatch<React.SetStateAction<IQuery[]>>;\r\n    isActive: boolean;\r\n    setIsActive: React.Dispatch<React.SetStateAction<boolean>>;\r\n    substrateRef: React.MutableRefObject<HTMLDivElement | null>;\r\n    choosenFilterParametrs: (string | number)[];\r\n    setChoosenFilterParametrs: React.Dispatch<React.SetStateAction<(string | number)[]>>;\r\n    type: categories;\r\n}) => {\r\n    const [brand, setBrand] = useState<string>('');\r\n    const [price, setPrice] = useState<string>('');\r\n    const [brandArr, setBrandArr] = useState<string[]>([]);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const dataInRedux = useAppSelector((state) => state.queryReducer.data.data as IPrice[]);\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const res = (await getFilterItemData(`${type}?fields[0]=brand&fields[1]`)) as IBrand;\r\n            const formattedAns = [];\r\n            for (let key in res.data) {\r\n                formattedAns.push(res.data[key].attributes.brand);\r\n            }\r\n            setBrandArr(formattedAns);\r\n        };\r\n        getData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (brand === 'Бренд' || brand === '') {\r\n        } else {\r\n            onSelectItemChangeHandler(queriesArr, setQueriesArr, brand);\r\n        }\r\n    }, [brand]);\r\n\r\n    useEffect(() => {\r\n        if (price === 'по возрастанию') {\r\n            const dataInReduxCopy = structuredClone(dataInRedux);\r\n\r\n            dataInReduxCopy.sort((a, b) => {\r\n                return a.attributes.price - b.attributes.price;\r\n            });\r\n\r\n            dispatch(setData({ data: dataInReduxCopy }));\r\n        } else if (price === 'по убыванию') {\r\n            const dataInReduxCopy = structuredClone(dataInRedux);\r\n\r\n            dataInReduxCopy.sort((a, b) => {\r\n                return b.attributes.price - a.attributes.price;\r\n            });\r\n\r\n            dispatch(setData({ data: dataInReduxCopy }));\r\n        }\r\n    }, [price]);\r\n\r\n    const RenderChoosen = (): React.JSX.Element => {\r\n        return (\r\n            <div className='choosen-wr'>\r\n                <div\r\n                    className='choosen choosen__cleanup'\r\n                    onClick={() => {\r\n                        setQueriesArr([]);\r\n                        setChoosenFilterParametrs([]);\r\n                    }}>\r\n                    Очистить все\r\n                </div>\r\n                {queriesArr.map((el: IQuery, indexTop) => {\r\n                    return el.searchParamKeys.map((el) => {\r\n                        return (\r\n                            <div key={v1()}>\r\n                                <div className='choosen'>\r\n                                    {el === 'available' ? 'Есть на складе' : el === 'discount' ? 'Скидка' : el === 'salesHit' ? 'Хит продаж' : el}\r\n                                    <IconRenderer\r\n                                        id='cross-icon'\r\n                                        onClick={() => {\r\n                                            if (choosenFilterParametrs.includes(el)) {\r\n                                                const choosenParIndex = choosenFilterParametrs.indexOf(el);\r\n\r\n                                                setChoosenFilterParametrs((prev) => {\r\n                                                    const newList = prev.filter((el, i) => i !== choosenParIndex);\r\n\r\n                                                    return newList;\r\n                                                });\r\n                                            }\r\n\r\n                                            setQueriesArr((prev) => {\r\n                                                const copy = structuredClone(prev);\r\n                                                for (let i = 0; i < queriesArr.length; i++) {\r\n                                                    if (prev[i].searchParamKeys.includes(el)) {\r\n                                                        const index = queriesArr[i].searchParamKeys.indexOf(el);\r\n\r\n                                                        copy[indexTop].searchParamKeys.splice(index, 1);\r\n                                                    }\r\n                                                }\r\n                                                return copy;\r\n                                            });\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    });\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className='top-filter'>\r\n            <p className='top-filter_title'>\r\n                {type.toLowerCase() === 'matrices'\r\n                    ? 'Матрицы'\r\n                    : type === 'batteries'\r\n                    ? 'Аккумуляторы'\r\n                    : type === 'hdds'\r\n                    ? 'Жесткие диски'\r\n                    : type === 'keyboards'\r\n                    ? 'Клавиатуры'\r\n                    : type === 'rams'\r\n                    ? 'Оперативная память'\r\n                    : type === 'power-Supplies'\r\n                    ? 'Блок питания'\r\n                    : type}\r\n            </p>\r\n            <div>\r\n                <div className='top-filter_filters'>\r\n                    <div id='filter-menu-burger-wr' className='filter-menu-burger-wr'>\r\n                        <div\r\n                            className='portal-div'\r\n                            onClick={() => {\r\n                                substrateRef.current?.classList.add('active');\r\n                                setIsActive(!isActive);\r\n                            }}>\r\n                            <IconRenderer id='filter-menu-burger' />\r\n                        </div>\r\n                    </div>\r\n                    <div className='select-container'>\r\n                        <p className='select-container__title'>Выберите бренд</p>\r\n                        <Select defValue='Бренд' arr={brandArr} setValue={setBrand} value={brand} />\r\n                    </div>\r\n                    <div className='select-container'>\r\n                        <p className='select-container__title'>Цена</p>\r\n                        <Select defValue='Цена' arr={['по возрастанию', 'по убыванию']} setValue={setPrice} value={price} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='top-filter__scroll'>\r\n                <div className='top-filter_filters_middle'>\r\n                    <div\r\n                        className={clsx({\r\n                            'top-filters_filters_middle_btn': true,\r\n                            active: choosenFilterParametrs.includes('available'),\r\n                        })}\r\n                        onClick={() => {\r\n                            (async function () {\r\n                                onStatusItemClickHandler(queriesArr, setQueriesArr, 'availability', 'available');\r\n                            })();\r\n\r\n                            if (choosenFilterParametrs.includes('available')) {\r\n                                const index = choosenFilterParametrs.indexOf('available');\r\n\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.splice(index, 1);\r\n                                    return prev;\r\n                                });\r\n                            } else {\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.push('available');\r\n                                    return prev;\r\n                                });\r\n                            }\r\n                        }}>\r\n                        Есть на складе\r\n                    </div>\r\n                    <div\r\n                        className={clsx({\r\n                            'top-filters_filters_middle_btn': true,\r\n                            active: choosenFilterParametrs.includes('discount'),\r\n                        })}\r\n                        onClick={() => {\r\n                            (async function () {\r\n                                onStatusItemClickHandler(queriesArr, setQueriesArr, 'tag', 'discount');\r\n                            })();\r\n\r\n                            if (choosenFilterParametrs.includes('discount')) {\r\n                                const index = choosenFilterParametrs.indexOf('discount');\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.splice(index, 1);\r\n                                    return prev;\r\n                                });\r\n                            } else {\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.push('discount');\r\n                                    return prev;\r\n                                });\r\n                            }\r\n                        }}>\r\n                        Скидка\r\n                    </div>\r\n                    <div\r\n                        className={clsx({\r\n                            'top-filters_filters_middle_btn': true,\r\n                            active: choosenFilterParametrs.includes('salesHit'),\r\n                        })}\r\n                        onClick={() => {\r\n                            (async function () {\r\n                                onStatusItemClickHandler(queriesArr, setQueriesArr, 'tag', 'salesHit');\r\n                            })();\r\n\r\n                            if (choosenFilterParametrs.includes('salesHit')) {\r\n                                const index = choosenFilterParametrs.indexOf('salesHit');\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.splice(index, 1);\r\n                                    return prev;\r\n                                });\r\n                            } else {\r\n                                setChoosenFilterParametrs((prev) => {\r\n                                    prev.push('salesHit');\r\n                                    return prev;\r\n                                });\r\n                            }\r\n                        }}>\r\n                        Хит продаж\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <RenderChoosen />\r\n            <FilterCards type={type} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TopFilter;\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Footer\\Footer.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\BurgerMenu.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\Header.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderBasket.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderCallBack.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderFavs.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\HeaderSearch.tsx",["480"],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\HeaderMiniCatalogItem.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\HeaderMiniCatalogPropertyItem.tsx",["481"],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Header\\MiniCatalog\\MiniCatalog.tsx",["482"],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\HistoryProducts\\HistoryProducts.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Loading\\Loading.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\MainStatics\\FeaturesStatic.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\MainStatics\\MainHero.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Order\\Order.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Order\\TownInput.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\Product.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductHistoryAdd.tsx",["483"],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductInteractiveElems.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductPair\\ProductPair.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductPair\\ProductPairClientButton.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductsTechs.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\ProductSwiper.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\SimilarProducts\\SimilarProducts.tsx",["484"],[],"\"use client\";\r\nimport React, { useState, useEffect, ChangeEvent, useRef } from \"react\";\r\nimport IconRenderer from \"../../../ui/Icons/IconRenderer\";\r\nimport \"./SimilarProducts.scss\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/dist/client/link\";\r\nimport axios from \"axios\";\r\nimport { useAppSelector } from \"@/app/Redux/store\";\r\nimport { IProduct } from \"../../../types/types\";\r\nimport SimilarProductCard from \"./SimilarProductsCard\";\r\nimport Spinner from \"../../Spinner/Spinner\";\r\nimport { fetchSimilarProducts } from \"@/app/lib/data\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Swiper as SwiperType } from \"swiper\";\r\nimport { Navigation } from \"swiper/modules\";\r\nimport \"swiper/css\";\r\n\r\nimport swiperArrow from \"/public/img/swiper-nav-arrow.svg\";\r\n\r\ninterface ProductImages {\r\n\tid: number;\r\n\tattributes: { url: string; width: number; height: number };\r\n}\r\ntype PropsType = {\r\n\timages: ProductImages[];\r\n};\r\n\r\nconst SimilarProducts = ({ productType }: { productType: string }) => {\r\n\tconst [products, setProducts] = useState<IProduct[]>([]);\r\n\r\n\tconst productsInBasket = useAppSelector((state) => state.basketReducer.products);\r\n\tconst productsInFavs = useAppSelector((state) => state.favsReducer.products);\r\n\t// Useeffect that runs all funcs and fills the products array with them\r\n\tuseEffect(() => {\r\n\t\tconst fetchAllSimilarProducts = async () => {\r\n\t\t\ttry {\r\n\t\t\t\t// Fetch products using fetchFeaturedProducts for the given product and filter type\r\n\t\t\t\tconst productData = await fetchSimilarProducts(productType);\r\n\r\n\t\t\t\t// Set the products state with the fetched data\r\n\t\t\t\tsetProducts(productData);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error getting product data:\", error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Call the function to fetch products when filterType or productType changes\r\n\t\tfetchAllSimilarProducts();\r\n\t}, [productType, fetchSimilarProducts, setProducts]);\r\n\r\n\tconst swiperRef = useRef<SwiperType>();\r\n\r\n\tconst [isEnd, setIsEnd] = useState<boolean | undefined>(false);\r\n\tconst [isBeginning, setIsBeginning] = useState<boolean | undefined>(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst checkSwiperStatus = () => {\r\n\t\t\tsetIsEnd(swiperRef.current?.isEnd);\r\n\t\t\tsetIsBeginning(swiperRef.current?.isBeginning);\r\n\t\t};\r\n\t\t// Initially check the status\r\n\t\tcheckSwiperStatus();\r\n\t\t// Set up a listener for changes in isEnd and isBeginning\r\n\t\tconst interval = setInterval(checkSwiperStatus, 500); // Change the interval as needed\r\n\t}, [swiperRef]);\r\n\r\n\treturn (\r\n\t\t<div className=\"similar-products__wrapper\">\r\n\t\t\t<div className=\"similar-products\">\r\n\t\t\t\t<div className=\"similar-products__top\">\r\n\t\t\t\t\t<div className=\"similar-products__title\">Похожие товары</div>\r\n\t\t\t\t\t<div className=\"similar-products__nav\">\r\n\t\t\t\t\t\t<button onClick={() => swiperRef.current?.slidePrev()} className={`similar-products__nav-button ${isBeginning ? \"disabled\" : \"\"}`}>\r\n\t\t\t\t\t\t\t<Image src={swiperArrow} alt=\"swiperArrow\" className=\"similar-products__nav-icon prev\"></Image>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={() => swiperRef.current?.slideNext()} className={`similar-products__nav-button ${isEnd ? \"disabled\" : \"\"}`}>\r\n\t\t\t\t\t\t\t<Image src={swiperArrow} alt=\"swiperArrow\" className=\"similar-products__nav-icon\"></Image>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"similar-products__content\">\r\n\t\t\t\t\t{products.length > 0 ? (\r\n\t\t\t\t\t\t<Swiper\r\n\t\t\t\t\t\t\tspaceBetween={40}\r\n\t\t\t\t\t\t\tslidesPerView={3}\r\n\t\t\t\t\t\t\tbreakpoints={{\r\n\t\t\t\t\t\t\t\t5: {\r\n\t\t\t\t\t\t\t\t\tslidesPerView: \"auto\",\r\n\t\t\t\t\t\t\t\t\tspaceBetween: 24\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t600: {\r\n\t\t\t\t\t\t\t\t\tslidesPerView: \"auto\",\r\n\t\t\t\t\t\t\t\t\tspaceBetween: 30\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t1440: {\r\n\t\t\t\t\t\t\t\t\tslidesPerView: 3,\r\n\t\t\t\t\t\t\t\t\tspaceBetween: 40\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tmodules={[Navigation]}\r\n\t\t\t\t\t\t\tonBeforeInit={(swiper) => {\r\n\t\t\t\t\t\t\t\tswiperRef.current = swiper;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tclassName=\"similar-products__slider\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{products.map((product, index) => {\r\n\t\t\t\t\t\t\t\t// Check if the product exists in productsInBasket\r\n\t\t\t\t\t\t\t\tconst foundProduct = productsInBasket.find((basketProduct) => basketProduct.name === product.name);\r\n\t\t\t\t\t\t\t\t// Determine if the product is bought\r\n\t\t\t\t\t\t\t\tconst isBought = !!foundProduct;\r\n\r\n\t\t\t\t\t\t\t\t// Check if the product exists in productsInBasket\r\n\t\t\t\t\t\t\t\tconst foundFav = productsInFavs.find((favProduct) => favProduct.name === product.name);\r\n\t\t\t\t\t\t\t\t// Determine if the product is bought\r\n\t\t\t\t\t\t\t\tconst isFav = !!foundFav;\r\n\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<SwiperSlide className=\"similar-products__slide\" key={product.id}>\r\n\t\t\t\t\t\t\t\t\t\t<SimilarProductCard key={index} product={product} isBought={isBought} isFav={isFav} />\r\n\t\t\t\t\t\t\t\t\t</SwiperSlide>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Swiper>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Spinner classname=\"similar-products__spinner\" white={true} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<div className=\"similar-products__whitie\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SimilarProducts;\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\ProductComponents\\SimilarProducts\\SimilarProductsCard.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Spinner\\Spinner.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\components\\Spinner\\Spinner.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\types\\types.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\buttons\\primary\\Primary.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\buttons\\primary\\PrimaryBtn.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\BasicRadio.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\BasicRadio.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\radio\\Radio.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\select\\Select.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\form\\select\\Select.tsx",["485"],[],"'use client';\r\nimport React, { useState, useRef, useEffect, FC } from 'react';\r\nimport IconRenderer from '../../Icons/IconRenderer';\r\nimport './Select.scss';\r\nimport { ISelect } from '../../../types/types';\r\n\r\nconst Select: FC<ISelect> = ({ value, setValue, className = '', defValue = 'choose your category', arr = ['1', '2', '3'] }) => {\r\n    const rootRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!value) setValue(defValue);\r\n    }, []);\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n\r\n    const onElementClickHandler = (str: string) => {\r\n        setValue((prev) => {\r\n            return str;\r\n        });\r\n    };\r\n\r\n    const onRootClickHandler = () => {\r\n        setOpen((prev) => !prev);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleClick = (event: MouseEvent) => {\r\n            const { target } = event;\r\n            if (target instanceof Node && !rootRef.current?.contains(target)) {\r\n                setOpen(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('click', handleClick);\r\n\r\n        return () => {\r\n            window.removeEventListener('click', handleClick);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`select ${className}`} onClick={() => onRootClickHandler()} ref={rootRef}>\r\n            <div className='select__title__wr'>\r\n                <p className='select__title'>{value}</p>\r\n                <IconRenderer id='arrow-down' className={`arrow_down ${open ? ' active' : ''}`} />\r\n            </div>\r\n            <ul className={`select__ul  ${open ? ' active' : ''}`}>\r\n                <div style={{ minHeight: '0px' }}>\r\n                    {arr.map((el) => (\r\n                        <li onClick={() => onElementClickHandler(el)} key={el} className='select__li'>\r\n                            {el}\r\n                        </li>\r\n                    ))}\r\n                </div>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\Icons\\IconRenderer.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\PrimaryInput.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\PrimaryInput.tsx",["486"],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\TextAreaInput.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\inputs\\TextAreaInput.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\DiscountSticker.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\DiscountSticker.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductAvailability.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductAvailability.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductTag.stories.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\common\\ui\\product-ui\\ProductTag.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\contacts\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\delivery\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\favourite\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\layout.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\lib\\data.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\lib\\service.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\not-found.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\order\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\product\\[...category_id]\\page.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\provider.tsx",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\basket\\basketSlice.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\favs\\favsSlice.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\historyProducts\\historyProducts.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\query\\query.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\slice\\search\\searchSlice.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\Redux\\store.ts",[],[],"D:\\Front-End\\AVADA_MEDIA\\noutparts-ssr\\app\\warranty\\page.tsx",[],[],{"ruleId":"487","severity":1,"message":"488","line":171,"column":8,"nodeType":"489","endLine":171,"endColumn":10,"suggestions":"490"},{"ruleId":"487","severity":1,"message":"491","line":41,"column":5,"nodeType":"489","endLine":41,"endColumn":17,"suggestions":"492"},{"ruleId":"487","severity":1,"message":"493","line":108,"column":8,"nodeType":"489","endLine":108,"endColumn":10,"suggestions":"494"},{"ruleId":"487","severity":1,"message":"495","line":128,"column":8,"nodeType":"489","endLine":128,"endColumn":20,"suggestions":"496"},{"ruleId":"487","severity":1,"message":"493","line":106,"column":8,"nodeType":"489","endLine":106,"endColumn":10,"suggestions":"497"},{"ruleId":"487","severity":1,"message":"495","line":126,"column":8,"nodeType":"489","endLine":126,"endColumn":20,"suggestions":"498"},{"ruleId":"487","severity":1,"message":"493","line":106,"column":8,"nodeType":"489","endLine":106,"endColumn":10,"suggestions":"499"},{"ruleId":"487","severity":1,"message":"495","line":126,"column":8,"nodeType":"489","endLine":126,"endColumn":20,"suggestions":"500"},{"ruleId":"487","severity":1,"message":"493","line":124,"column":8,"nodeType":"489","endLine":124,"endColumn":10,"suggestions":"501"},{"ruleId":"487","severity":1,"message":"495","line":144,"column":8,"nodeType":"489","endLine":144,"endColumn":20,"suggestions":"502"},{"ruleId":"487","severity":1,"message":"493","line":105,"column":8,"nodeType":"489","endLine":105,"endColumn":10,"suggestions":"503"},{"ruleId":"487","severity":1,"message":"495","line":125,"column":8,"nodeType":"489","endLine":125,"endColumn":20,"suggestions":"504"},{"ruleId":"487","severity":1,"message":"493","line":118,"column":8,"nodeType":"489","endLine":118,"endColumn":10,"suggestions":"505"},{"ruleId":"487","severity":1,"message":"495","line":138,"column":8,"nodeType":"489","endLine":138,"endColumn":20,"suggestions":"506"},{"ruleId":"487","severity":1,"message":"507","line":68,"column":8,"nodeType":"489","endLine":68,"endColumn":10,"suggestions":"508"},{"ruleId":"487","severity":1,"message":"509","line":75,"column":8,"nodeType":"489","endLine":75,"endColumn":15,"suggestions":"510"},{"ruleId":"487","severity":1,"message":"511","line":95,"column":8,"nodeType":"489","endLine":95,"endColumn":15,"suggestions":"512"},{"ruleId":"487","severity":1,"message":"513","line":92,"column":5,"nodeType":"489","endLine":92,"endColumn":7,"suggestions":"514"},{"ruleId":"487","severity":1,"message":"515","line":165,"column":5,"nodeType":"489","endLine":165,"endColumn":22,"suggestions":"516"},{"ruleId":"487","severity":1,"message":"517","line":56,"column":8,"nodeType":"489","endLine":56,"endColumn":10,"suggestions":"518"},{"ruleId":"487","severity":1,"message":"519","line":22,"column":8,"nodeType":"489","endLine":22,"endColumn":10,"suggestions":"520"},{"ruleId":"487","severity":1,"message":"521","line":50,"column":5,"nodeType":"489","endLine":50,"endColumn":53,"suggestions":"522"},{"ruleId":"487","severity":1,"message":"523","line":12,"column":8,"nodeType":"489","endLine":12,"endColumn":10,"suggestions":"524"},{"ruleId":"487","severity":1,"message":"525","line":15,"column":8,"nodeType":"489","endLine":15,"endColumn":10,"suggestions":"526"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'selector', and 'type'. Either include them or remove the dependency array.","ArrayExpression",["527"],"React Hook useEffect has a missing dependency: 'productTypes'. Either include it or remove the dependency array.",["528"],"React Hook useEffect has missing dependencies: 'dispatch', 'prevType', 'queriesArr', and 'selector'. Either include them or remove the dependency array.",["529"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["530"],["531"],["532"],["533"],["534"],["535"],["536"],["537"],["538"],["539"],["540"],"React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["541"],"React Hook useEffect has missing dependencies: 'queriesArr' and 'setQueriesArr'. Either include them or remove the dependency array.",["542"],"React Hook useEffect has missing dependencies: 'dataInRedux' and 'dispatch'. Either include them or remove the dependency array.",["543"],"React Hook useEffect has a missing dependency: 'fetchProductsData'. Either include it or remove the dependency array.",["544"],"React Hook useEffect has missing dependencies: 'dispatch', 'router', and 'setBigMenuActive'. Either include them or remove the dependency array. If 'setBigMenuActive' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["545"],"React Hook useEffect has a missing dependency: 'handleDocumentClick'. Either include it or remove the dependency array.",["546"],"React Hook useEffect has missing dependencies: 'dispatch' and 'product'. Either include them or remove the dependency array.",["547"],"React Hook useEffect has an unnecessary dependency: 'fetchSimilarProducts'. Either exclude it or remove the dependency array. Outer scope values like 'fetchSimilarProducts' aren't valid dependencies because mutating them doesn't re-render the component.",["548"],"React Hook useEffect has missing dependencies: 'defValue', 'setValue', and 'value'. Either include them or remove the dependency array. If 'setValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["549"],"React Hook useEffect has missing dependencies: 'handleValidation' and 'inputValue'. Either include them or remove the dependency array.",["550"],{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"555","fix":"559"},{"desc":"557","fix":"560"},{"desc":"555","fix":"561"},{"desc":"557","fix":"562"},{"desc":"555","fix":"563"},{"desc":"557","fix":"564"},{"desc":"555","fix":"565"},{"desc":"557","fix":"566"},{"desc":"555","fix":"567"},{"desc":"557","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},"Update the dependencies array to be: [dispatch, selector, type]",{"range":"589","text":"590"},"Update the dependencies array to be: [filterType, productTypes]",{"range":"591","text":"592"},"Update the dependencies array to be: [dispatch, prevType, queriesArr, selector]",{"range":"593","text":"594"},"Update the dependencies array to be: [dispatch, queriesArr]",{"range":"595","text":"596"},{"range":"597","text":"594"},{"range":"598","text":"596"},{"range":"599","text":"594"},{"range":"600","text":"596"},{"range":"601","text":"594"},{"range":"602","text":"596"},{"range":"603","text":"594"},{"range":"604","text":"596"},{"range":"605","text":"594"},{"range":"606","text":"596"},"Update the dependencies array to be: [type]",{"range":"607","text":"608"},"Update the dependencies array to be: [brand, queriesArr, setQueriesArr]",{"range":"609","text":"610"},"Update the dependencies array to be: [dataInRedux, dispatch, price]",{"range":"611","text":"612"},"Update the dependencies array to be: [fetchProductsData]",{"range":"613","text":"614"},"Update the dependencies array to be: [dispatch, router, selectedOptions, setBigMenuActive]",{"range":"615","text":"616"},"Update the dependencies array to be: [handleDocumentClick]",{"range":"617","text":"618"},"Update the dependencies array to be: [dispatch, product]",{"range":"619","text":"620"},"Update the dependencies array to be: [productType, setProducts]",{"range":"621","text":"622"},"Update the dependencies array to be: [defValue, setValue, value]",{"range":"623","text":"624"},"Update the dependencies array to be: [handleValidation, inputValue]",{"range":"625","text":"626"},[4412,4414],"[dispatch, selector, type]",[1666,1678],"[filterType, productTypes]",[4523,4525],"[dispatch, prevType, queriesArr, selector]",[5172,5184],"[dispatch, queriesArr]",[4440,4442],[5084,5096],[4584,4586],[5233,5245],[5522,5524],[6170,6182],[4590,4592],[5244,5256],[5072,5074],[5716,5728],[2237,2239],"[type]",[2428,2435],"[brand, queriesArr, setQueriesArr]",[3088,3095],"[dataInRedux, dispatch, price]",[2365,2367],"[fetchProductsData]",[4278,4295],"[dispatch, router, selectedOptions, setBigMenuActive]",[2088,2090],"[handleDocumentClick]",[586,588],"[dispatch, product]",[1846,1894],"[productType, setProducts]",[471,473],"[defValue, setValue, value]",[613,615],"[handleValidation, inputValue]"]